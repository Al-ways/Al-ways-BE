import org.hidetake.gradle.swagger.generator.GenerateSwaggerUI
import org.springframework.boot.gradle.tasks.bundling.BootJar

buildscript {
	//querydsl 추가
	dependencies {
		classpath("gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:1.0.10")
	}
	//restdocsapi add
	ext {
		restdocsApiSpecVersion = '0.16.2'
	}
}


plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.15'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'

	id 'com.epages.restdocs-api-spec' version "${restdocsApiSpecVersion}"

	// swagger generator 플러그인 추가
	id 'org.hidetake.swagger.generator' version '2.18.2'
}

////querydsl
//apply plugin: "com.ewerk.gradle.plugins.querydsl"

group = 'com.project'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '11'
}

openapi3 {
	setServer("http://localhost:8080")
	title = "Al-ways API 문서"
	description = "Spring REST Docs with SwaggerUI."
	version = "0.0.1"
	format = "yaml"
}

// swaggerSources 설정 추가
swaggerSources {
	sample {
		setInputFile(file("${project.buildDir}/api-spec/openapi3.yaml"))
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

compileTestJava {
	options.encoding = 'UTF-8'
}


dependencies {
	// spring boot
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// test junit5
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// oauth2.0 security
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	testImplementation 'org.springframework.security:spring-security-test'

	// mysql
	runtimeOnly 'com.mysql:mysql-connector-j'
	//Rest Assured
	testImplementation 'io.rest-assured:rest-assured'

	// mockmvc
	testImplementation 'io.rest-assured:spring-mock-mvc'

	// apache
	implementation 'org.apache.commons:commons-lang3'

	//Rest Docs
	testImplementation 'org.springframework.restdocs:spring-restdocs-restassured'
	testImplementation "com.epages:restdocs-api-spec-restassured:${restdocsApiSpecVersion}"
	testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.16.2'

	// SwaggerUI
	swaggerUI 'org.webjars:swagger-ui:4.11.1'

	// jwt
	implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

	//mapstruct
	implementation 'org.mapstruct:mapstruct:1.4.2.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
//   // querydsl
//   implementation 'com.querydsl:querydsl-jpa'
//   implementation 'com.querydsl:querydsl-apt'

	implementation group: 'org.javassist', name: 'javassist', version: '3.15.0-GA'
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

	// ElasticSearch
	implementation 'org.springframework.data:spring-data-elasticsearch:4.4.0'
}


tasks.named('test') {
	useJUnitPlatform()
}

tasks.named('jar') {
	dependsOn 'copySwaggerUI'
}

tasks.named('bootJarMainClassName') {
	dependsOn 'copySwaggerUI'
}


tasks.named('test') {
	useJUnitPlatform()
}

tasks.named('jar') {
	dependsOn 'copySwaggerUI'
}

tasks.named('bootJarMainClassName') {
	dependsOn 'copySwaggerUI'
}

// GenerateSwaggerUI 태스크가, openapi3 task 를 의존하도록 설정
tasks.withType(GenerateSwaggerUI) {
	dependsOn 'openapi3'
}

// 생성된 SwaggerUI 를 jar 에 포함시키기 위해 build/resources 경로로 로 복사
tasks.register('copySwaggerUI', Copy) {
	dependsOn 'generateSwaggerUISample'

	def generateSwaggerUISampleTask = tasks.named('generateSwaggerUISample', GenerateSwaggerUI).get()

	from("${generateSwaggerUISampleTask.outputDir}")
	into("${project.buildDir}/resources/main/static/docs")
}

// bootJar 실행 전, copySwaggerUI 를 실행하도록 설정
tasks.withType(BootJar) {
	dependsOn 'copySwaggerUI'
	bootJar {
		duplicatesStrategy = 'exclude' // 중복 항목을 제외합니다.
	}
}


//setup asciidoctor
//asciidoctor {
//   inputs.dir snippetsDir
//   dependsOn test
//}
//
//// 여러 restdocs가 생기는 것을 방지
//task createDocument(type: Copy) {
//   dependsOn asciidoctor
//   from file("build/asciidoc/html5/index.html")
//   into file("src/main/resources/static/docs")
//}
//
//bootJar {
//   dependsOn createDocument
//   from("${asciidoctor.outputDir}/html5") {
//      into 'static/docs'
//   }
//}

//querydsl 추가
//def querydslDir = 'src/main/generated'
//def querydslDir = "$buildDir/generated/querydsl"
//querydsl {
//   library = "com.querydsl:querydsl-apt"
//   jpa = true
//   querydslSourcesDir = querydslDir
//}
//
//sourceSets {
//   main {
//      java {
//         srcDirs = ['src/main/java', querydslDir]
//      }
//   }
//}
//
//compileQuerydsl{
//   options.annotationProcessorPath = configurations.querydsl
//}
//
//configurations {
//   querydsl.extendsFrom compileClasspath
//}